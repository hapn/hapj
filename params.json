{"name":"Hapj","tagline":"js framework","body":"HapJ javascript 框架\r\n===================\r\n\r\n> HapJ是一个面向UI的javascript框架，提供了前端开发过程中常见的问题的解决方案。诸如表单校验、延迟加载、异步处理、广告轮换、以及一系列UI交互体验优化的功能。\r\n> hapj.js是其中最核心的文件，包括了`UI`、`日志`、`钩子`、`模块`等基本组件。\r\n\r\nhapj的基本理念\r\n-----------\r\n\r\n* `模块化开发`，保持业务模块的独立性，降低不同业务的耦合。\r\n* 通过`钩子`机制细化业务流程，并避免对核心代码造成入侵。\r\n* 强调`日志`的重要性，允许通过日志的形式来跟踪用户随时产生的浏览器端的错误。\r\n* `UI组件`强调html标签语义化，使html和js可以严格分离。\r\n\r\n\r\n### 模块化开发\r\n\r\n封装一个模块\r\n\r\n``` javascript\r\n// store.js\r\n\r\n!function(H) {\r\n\tvar store = {\r\n\t\tget: function(id) {\r\n\t\t\treturn {\r\n\t\t\t\tid: id,\r\n\t\t\t\tname:'foo'\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\tH.set('store', store);\r\n}(hapj);\r\n```\r\n\r\n调用该模块\r\n``` javascript\r\nvar store = hapj.get('store').get(3);\r\n```\r\n\r\n\r\n### 钩子机制\r\n\r\nhapj核心预留了一些钩子(hook)，通过实现这些钩子，可以细化网站的业务流程，同时不对hapj核心代码入侵。\r\n\r\n比如：我们下面的代码让表单提交时包含password类型的字段自动md5编码，使得密码不再明文提交。\r\n\r\n```javascript\r\n// 表单提交\r\nhapj.hook.set('form.submit', function(e, options){\r\n\t// 设置debug参数\r\n\tvar form = this;\r\n\t\r\n\tif (!options.pack) {\r\n\t\toptions.pack = function(data) {\r\n\t\t\t// 对type=password的字段进行加密处理\r\n\t        hapj.each(data, function(name){\r\n\t\t\t\tif (form[name] && 'password' == form[name].type) {\r\n\t\t\t\t\tdata[name] = hapj.string.toMd5(data[name]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n});\r\n```\r\n\r\n\r\n### 日志\r\nhapj的日志有两种模式，DEVELOP和ONLINE，DEVELOP模式遇到错误会直接报错，而ONLINE模式，如果有错误，且设置了hapj.log.url，则会将报错信息提交到该网址。\r\n\r\n### UI组件\r\n\r\nUI组件包括诸如表单校验、广告轮播、延迟加载等一系列的常用组件，解决了前端开发过程中常遇到的交互问题，且不会对正常的html和css代码构成入侵。\r\n\r\n#### verifiable（验证组件）\r\n\r\n校验组件只需要用verify-rule给表单元素配置相应的校验和提示规则，即可实现表单的校验、提交等。\r\n\r\n```html\r\n<form id=\"formAdd\" action=\"/foo/_bar\" method=\"post\">\r\n<input type=\"text\" name=\"email\" verify-rule=\"{\r\n\t\trequired:'必填',\r\n\t\temail:'必须为email'\r\n\t}\">\r\n\r\n<input type=\"text\" name=\"cate_ename\" verify-rule=\"{\r\n\t\t\t'range': {\r\n\t\t\t\ttype:'length',\r\n\t\t\t\tmin:2,\r\n\t\t\t\tmax:20,\r\n\t\t\t\tmsg:'英文别名为2-20位'\r\n\t\t\t},\r\n\t\t\t'regexp':/^[a-z][a-z0-9\\-_]{1,19}$/i,\r\n\t\t\t'hint':'英文别名，比如hunshasheying等'\r\n\t\t}\">\r\n</form>\r\n<script>\r\n\t$('#formAdd').verifiable();\r\n</script>\r\n\r\n```\r\n\r\n\r\n#### switchable（轮播组件）\r\n\r\nswitchable是在研究了一系列可切换的共同特点以后，抽象出来的一个UI组件。包括了如下几组概念：\r\n* `触发元素` 是指用户通过光标点击或者光标经过等行为能引起切换的原始元素。\r\n* `目标元素` 是指用户通过触发元素引起切换时的切换动作的主体元素。\r\n* `一组元素` 一个触发元素和对应的目标元素构成一组元素。\r\n\r\n通过map方法找到需要触发切换动作的元素关联到的元素；通过trigger方法来进行触发元素的变化；通过target方法来进行目标元素的变化。\r\n其中，目标元素和切换元素可以是同一个元素。\r\n\r\n```html\r\n\r\n<ul id=\"tab\">\r\n\t<li>Item1</li>\r\n\t<li>Item2</li>\r\n\t<li>Item3</li>\r\n\t<li>Item4</li>\r\n</ul>\r\n\r\n<div id=\"div1\" class=\"panel\">div1</div>\r\n<div id=\"div2\" class=\"panel\">div2</div>\r\n<div id=\"div3\" class=\"panel\">div3</div>\r\n<div id=\"div4\" class=\"panel\">div4</div>\r\n\r\n<script>\r\n$('#tab').switchable({\r\n\t\ttag:'li',\r\n\t\tmethod:'click',\r\n\t\tmap:function(i) {\r\n\t\t\treturn $('#div' + (i+1))[0];\r\n\t\t},\r\n\t\ttrigger:function(ts) {\r\n\t\t\tts.removeClass('on');\r\n\t\t\tthis.className = 'on';\r\n\t\t},\r\n\t\ttarget:function(ts) {\r\n\t\t\tts.hide();\r\n\t\t\tthis.style.display = 'block';\r\n\t\t},\r\n\t\tcycleTime:2000\r\n\t}).rand();\r\n</script>\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}